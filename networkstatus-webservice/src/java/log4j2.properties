#appender.console.type = Console
#appender.console.name = console
#appender.console.layout.type = PatternLayout
#
#rootLogger.level = info
#rootLogger.appenderRef.console.ref = console


#status = error
#name = PropertiesConfig
# 
#filters = threshold
# 
#filter.threshold.type = ThresholdFilter
#filter.threshold.level = debug
# 
#appenders = console
# 
#appender.console.type = Console
#appender.console.name = STDOUT
#appender.console.layout.type = PatternLayout
#appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
# 
#rootLogger.level = debug
#rootLogger.appenderRefs = stdout
#rootLogger.appenderRef.stdout.ref = STDOUT



#status = error
#name = PropertiesConfig
# 
##Make sure to change log file path as per your need
#property.filename = d:\\backup.log
# 
#filters = threshold
# 
#filter.threshold.type = ThresholdFilter
#filter.threshold.level = debug
# 
#appenders = rolling
# 
#appender.rolling.type = RollingFile
#appender.rolling.name = RollingFile
#appender.rolling.fileName = ${filename}
#appender.rolling.filePattern = debug-backup-%d{MM-dd-yy-HH-mm-ss}-%i.log.gz
#appender.rolling.layout.type = PatternLayout
#appender.rolling.layout.pattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
#appender.rolling.policies.type = Policies
#appender.rolling.policies.time.type = TimeBasedTriggeringPolicy
#appender.rolling.policies.time.interval = 1
#appender.rolling.policies.time.modulate = true
#appender.rolling.policies.size.type = SizeBasedTriggeringPolicy
#appender.rolling.policies.size.size = 1MB
#appender.rolling.strategy.type = DefaultRolloverStrategy
#appender.rolling.strategy.max = 20
# 
#loggers = rolling
# 
##Make sure to change the package structure as per your application
# 
#logger.rolling.name = com.project
#logger.rolling.level = debug
#logger.rolling.additivity = false
#logger.rolling.appenderRef.rolling.ref = RollingFile




status = warn
name= properties_configuration

# Give directory path where log files should get stored
property.basePath = /opt/logs/


# ConsoleAppender will print logs on console
appender.console.type = Console
appender.console.name = consoleLogger
appender.console.target = SYSTEM_OUT
appender.console.layout.type = PatternLayout

# Specify the pattern of the logs
appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss.SSS} %level [%t] [%c] [%M] [%l] - %msg%n


# RollingFileAppender will print logs in file which can be rotated based on time or size
appender.rolling.type = RollingFile
appender.rolling.name = fileLogger
appender.rolling.fileName= ${basePath}SEEMS.log
appender.rolling.filePattern= ${basePath}SEEMS_%d{yyyyMMdd}.log.gz
appender.rolling.layout.type = PatternLayout
appender.rolling.layout.pattern = %d{yyyy-MM-dd HH:mm:ss.SSS} %level [%t] [%c] [%M] [%l] - %msg%n
appender.rolling.policies.type = Policies

# Rotate log file each day and keep 30 days worth
appender.rolling.policies.time.type = TimeBasedTriggeringPolicy
appender.rolling.policies.time.interval = 1
appender.rolling.policies.time.modulate = true
appender.rolling.strategy.type = DefaultRolloverStrategy
appender.rolling.strategy.delete.type = Delete
appender.rolling.strategy.delete.basePath = ${basePath}
appender.rolling.strategy.delete.maxDepth = 1
appender.rolling.strategy.delete.ifLastModified.type = IfLastModified
# Delete files older than 30 days
appender.rolling.strategy.delete.ifLastModified.age = 30d

# Mention package name here in place of example. Classes in this package or subpackages will use ConsoleAppender and RollingFileAppender for logging         
logger.example.name = com.project
logger.example.level = debug
logger.example.additivity = false
logger.example.appenderRef.rolling.ref = fileLogger
logger.example.appenderRef.console.ref = consoleLogger

# Configure root logger for logging error logs in classes which are in package other than above specified package
rootLogger.level = error
rootLogger.additivity = false
rootLogger.appenderRef.rolling.ref = fileLogger
rootLogger.appenderRef.console.ref = consoleLogger


